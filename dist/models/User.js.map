{"version":3,"sources":["../../server/models/User.js"],"names":["mongoose","require","Schema","crypto","userSchema","first_name","type","String","required","last_name","email_address","user_salt","user_hash","methods","setPassword","password","randomBytes","toString","pbkdf2Sync","validPassword","hash","User","model","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAMA,QAAQ,2BAAGC,OAAO,CAAC,UAAD,CAAV,CAAd,C,CAEA;;mCACmBD,Q;IAAXE,M,QAAAA,M,EAER;;;AACA,IAAMC,MAAM,2BAAGF,OAAO,CAAC,QAAD,CAAV,CAAZ,C,CAEA;;AACA,IAAMG,UAAU,2BAAG,IAAIF,MAAJ,CAAW;AAC5B;AACAG,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAEC,MADI;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GAFgB;AAM5BC,EAAAA,SAAS,EAAE;AACTH,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GANiB;AAU5BE,EAAAA,aAAa,EAAE;AACbJ,IAAAA,IAAI,EAAEC,MADO;AAEbC,IAAAA,QAAQ,EAAE;AAFG,GAVa;AAc5BG,EAAAA,SAAS,EAAE;AACTL,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GAdiB;AAkB5BI,EAAAA,SAAS,EAAE;AACTN,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE;AAFD;AAlBiB,CAAX,CAAH,CAAhB,C,CAwBA;;;;AACAJ,UAAU,CAACS,OAAX,CAAmBC,WAAnB,GAAiC,UAAUC,QAAV,EAAoB;AAAA;AAAA;AACnD,OAAKJ,SAAL,GAAiBR,MAAM,CAACa,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAjB;AADmD;AAGnD,OAAKL,SAAL,GAAiBT,MAAM,CACpBe,UADc,CACHH,QADG,EACO,KAAKJ,SADZ,EACuB,IADvB,EAC6B,EAD7B,EACiC,QADjC,EAEdM,QAFc,CAEL,KAFK,CAAjB,CAHmD,CAMnD;AACD,CAPD,C,CASA;;;;;AACAb,UAAU,CAACS,OAAX,CAAmBM,aAAnB,GAAmC,UAAUJ,QAAV,EAAoB;AAAA;AACrD,MAAMK,IAAI,2BAAGjB,MAAM,CAChBe,UADU,CACCH,QADD,EACW,KAAKJ,SADhB,EAC2B,IAD3B,EACiC,EADjC,EACqC,QADrC,EAEVM,QAFU,CAED,KAFC,CAAH,CAAV,CADqD,CAKrD;;AALqD;AAMrD,SAAO,KAAKL,SAAL,KAAmBQ,IAA1B;AACD,CAPD;;AAQA,IAAMC,IAAI,4BAAGrB,QAAQ,CAACsB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAH,CAAV;;AAEAmB,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["// Call mongoose\nconst mongoose = require('mongoose');\n\n// Call Schema constructor\nconst { Schema } = mongoose;\n\n// Library for hashing passwords (encryption)\nconst crypto = require('crypto');\n\n// Creating a user schema\nconst userSchema = new Schema({\n  // user_id: mongoose.Schema.Types.ObjectId,\n  first_name: {\n    type: String,\n    required: true,\n  },\n  last_name: {\n    type: String,\n    required: true,\n  },\n  email_address: {\n    type: String,\n    required: true,\n  },\n  user_salt: {\n    type: String,\n    required: true,\n  },\n  user_hash: {\n    type: String,\n    required: true,\n  },\n});\n\n// Password Encryption\nuserSchema.methods.setPassword = function (password) {\n  this.user_salt = crypto.randomBytes(16).toString('hex');\n\n  this.user_hash = crypto\n    .pbkdf2Sync(password, this.user_salt, 1000, 64, 'sha512')\n    .toString('hex');\n  // console.log(\"The user hash\", this.user_hash)\n};\n\n// Login password validation\nuserSchema.methods.validPassword = function (password) {\n  const hash = crypto\n    .pbkdf2Sync(password, this.user_salt, 1000, 64, 'sha512')\n    .toString('hex');\n\n  // Returns either true or false depending on if the password matches the hashed value stored\n  return this.user_hash === hash;\n};\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"],"file":"User.js"}