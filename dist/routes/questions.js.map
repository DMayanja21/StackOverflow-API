{"version":3,"sources":["../../server/routes/questions.js"],"names":["express","require","router","Router","Question","Answer","get","req","res","find","then","results","length","status","json","message","err","console","error","params","questionID","findOne","_id","result","post","retrieveToken","token","authData","user","user_id","body","title","text","newQuestion","save","userID","resultsOfOperation","findByIdAndDelete","qnResult","deleteMany","question_id","n","ansResults","module","exports"],"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","sourcesContent":["// Token handling functions\nimport {\n  createToken,\n  retrieveToken,\n  verifyToken,\n} from './token-handling-functions';\n\nconst express = require('express');\n\nconst router = express.Router();\nconst Question = require('../models/Question');\nconst Answer = require('../models/Answer');\n\n// Get all questions\n// Unprotected endpoint\nrouter.get('/', (req, res) => {\n  Question.find()\n    .then((results) => {\n      if (results && results.length) {\n        res.status(200).json(results);\n      } else {\n        res.status(404).json({\n          status: 404,\n          message: 'No questions found',\n        });\n      }\n    })\n    .catch((err) => {\n      const message = 'An error occurred querying MongoDB for all questions';\n      console.error(message, err);\n      res.status(500).json({\n        status: 500,\n        message,\n        err,\n      });\n    });\n});\n\n// Get a single question object\n// Unprotected endpoint\nrouter.get('/:questionID', (req, res) => {\n  const { questionID } = req.params;\n\n  Question.findOne({\n    _id: questionID,\n  })\n    .then((result) => {\n      if (result) {\n        res.status(200).json(result);\n      } else {\n        res.status(404).json({\n          status: 404,\n          message: 'That question does not exist',\n        });\n      }\n    })\n    .catch((err) => {\n      const message = `An error occurred querying MongoDB for question with ID:${questionID}`;\n      console.error(message, err);\n      res.status(500).json({\n        status: 500,\n        message,\n        err,\n      });\n    });\n});\n\n// Post a question\n// Endpoint protected by JWT\nrouter.post('/', retrieveToken, (req, res) => {\n  verifyToken(req.token)\n    .then((authData) => {\n      // authData is available if needed\n      if (authData === 403) {\n        res.status(403).json({\n          status: 403,\n          message: 'Invalid credentials',\n        });\n        return;\n      }\n\n      const { user_id } = authData.user;\n      const { title } = req.body;\n      const { text } = req.body;\n\n      const newQuestion = new Question({\n        user_id,\n        title,\n        text,\n      });\n\n      newQuestion\n        .save()\n        .then((result) => {\n          res.status(201).json(result);\n        })\n        .catch((err) => {\n          if (err) {\n            const message = 'There was an error saving the question';\n            console.error(message, err);\n            res.status(500).json({\n              status: 500,\n              message,\n              err,\n            });\n          }\n        });\n      //\n    })\n    .catch((err) => {\n      if (err) {\n        const message = 'An error ocurred validating user token';\n        console.error(message, err);\n        res.status(500).json({\n          status: 500,\n          message,\n          err,\n        });\n      }\n    });\n});\n\n// Get all questions by a user\nrouter.get('/user/:userID', (req, res) => {\n  const { userID } = req.params;\n\n  Question.find({\n    user_id: userID,\n  })\n    .then((result) => {\n      if (result) {\n        res.status(200).json(result);\n      } else {\n        res.status(404).json({\n          status: 404,\n          message: 'No questions found',\n        });\n      }\n    })\n    .catch((err) => {\n      if (err) {\n        const message = `No questions by user: ${userID} were found`;\n        console.error(message, err);\n        res.status(500).json({\n          message,\n          err,\n        });\n      }\n    });\n});\n\n// Delete a question\nrouter.delete('/:questionID', retrieveToken, (req, res) => {\n  verifyToken(req.token)\n    .then((authData) => {\n      if (authData === 403) {\n        res.status(403).json({\n          status: 403,\n          message: 'Invalid credentials',\n        });\n        return;\n      }\n\n      const { questionID } = req.params;\n\n      // Create the object that will be returned\n      const resultsOfOperation = {};\n\n      Question.findByIdAndDelete({\n        _id: questionID,\n      })\n        .then((result) => {\n          if (result !== null) {\n            // Attach results of deleting qn to the resultsOfOperation object\n            resultsOfOperation.qnResult = result;\n            Answer.deleteMany({\n              question_id: questionID,\n            })\n              .then((result) => {\n                // If result === null or result.n===0, then no answers were found\n                if (result !== null && result.n !== 0) {\n                  resultsOfOperation.ansResults = result;\n\n                  return resultsOfOperation;\n                }\n                resultsOfOperation.ansResults = {\n                  message:\n                                        'No answers were attached to the qn',\n                };\n                return resultsOfOperation;\n              })\n              .then((results) => {\n                res.status(200).json(results);\n              })\n              .catch((err) => {\n                const message = `Error deleting answers related to question:${questionID}`;\n                console.error(message, err);\n                res.status(500).json({\n                  message,\n                  err,\n                });\n              });\n          } else {\n            const message = `Error 404 deleting question:${questionID}, Not found`;\n            console.error(message);\n            res.status(404).json({\n              message,\n            });\n          }\n\n          // return resultsOfOperation\n        })\n        .catch((err) => {\n          if (err) {\n            const message = `Error deleting question:${questionID}`;\n            console.error(message, err);\n            res.status(500).json({\n              message,\n              err,\n            });\n          }\n        });\n    })\n    .catch((err) => {\n      if (err) {\n        const message = `Error verifying user token to delete question:${questionID}`;\n        console.error(message, err);\n        res.status(500).json({\n          message,\n          err,\n        });\n      }\n    });\n});\n\nmodule.exports = router;\n"],"file":"questions.js"}